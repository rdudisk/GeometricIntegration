/**
\page quick_tutorial Quick tutorial

\section introduction Introduction
This tutorial is intended to quickly be able to use the basics of the library without diving into the internals.
Developpers might consider reading the documentation instead.

\section rkmk RKMK module
In this module, we consider dynamical systems governed by the equation
\f[
	\dot Y(t) = A(t,Y)Y(t)
\f]
where \f$Y\f$ lies on the configuration manifold \f$\mathcal M\f$ of the system,
with \f$\mathcal M\f$ is left-invariant for the action of the Lie group \f$G\f$,
and \f$A\f$ belongs to the associated Lie algebra \f$\mathfrak g\f$ for all couple \f$t,Y\f$.

The first step is to define the configuration manifold. **TODO**

The second step is to provide the equations for the problem, namely the matrix \f$A\f$.
This is done by inheriting the abstract class `RKMK::Abstract::Problem` and implementing the virtual functions `computeA` and `computeJacobianA`.
In our example with the rigid body problem, we have
\code{.cpp}
class RigidBodyProblem : public RKMK::Abstract::Problem<double,Q,Algebra>
{
	private:
		// Inverted inertia tensor
		Eigen::Matrix<double,3,1> m_Iinv;
	
	public:
		/* ... */

		bool
		computeA (Algebra& A, const Q& x)
		{
			A = Algebra((-m_Iinv).asDiagonal()*x);
			return true;
		}

		bool
		computeJacobianA (std::vector<Algebra>& JA, const Q& x)
		{
			Eigen::Matrix<double,3,3> M = (-m_Iinv).asDiagonal();
			for (int i=0; i<3; i++)
				JA.push_back(Algebra(M.col(i)));
			return true;
		}
};
\endcode
*/
